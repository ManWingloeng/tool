# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_c_vibep')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_c_vibep')
    _c_vibep = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_c_vibep', [dirname(__file__)])
        except ImportError:
            import _c_vibep
            return _c_vibep
        try:
            _mod = imp.load_module('_c_vibep', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _c_vibep = swig_import_helper()
    del swig_import_helper
else:
    import _c_vibep
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class ViBePlus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViBePlus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViBePlus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _c_vibep.new_ViBePlus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _c_vibep.delete_ViBePlus
    __del__ = lambda self: None

    def FrameCapture(self, img):
        return _c_vibep.ViBePlus_FrameCapture(self, img)

    def init(self):
        return _c_vibep.ViBePlus_init(self)

    def ProcessFirstFrame(self):
        return _c_vibep.ViBePlus_ProcessFirstFrame(self)

    def Run(self):
        return _c_vibep.ViBePlus_Run(self)

    def ExtractBG(self):
        return _c_vibep.ViBePlus_ExtractBG(self)

    def CalcuUpdateModel(self):
        return _c_vibep.ViBePlus_CalcuUpdateModel(self)

    def Update(self):
        return _c_vibep.ViBePlus_Update(self)

    def UpdatePixSampleSumSquare(self, i, j, k, val):
        return _c_vibep.ViBePlus_UpdatePixSampleSumSquare(self, i, j, k, val)

    def UpdatePixSampleAve(self, i, j, k, val):
        return _c_vibep.ViBePlus_UpdatePixSampleAve(self, i, j, k, val)

    def getSegModel(self):
        return _c_vibep.ViBePlus_getSegModel(self)

    def getUpdateModel(self):
        return _c_vibep.ViBePlus_getUpdateModel(self)

    def deleteSamples(self):
        return _c_vibep.ViBePlus_deleteSamples(self)
    __swig_setmethods__["c_xoff"] = _c_vibep.ViBePlus_c_xoff_set
    __swig_getmethods__["c_xoff"] = _c_vibep.ViBePlus_c_xoff_get
    if _newclass:
        c_xoff = _swig_property(_c_vibep.ViBePlus_c_xoff_get, _c_vibep.ViBePlus_c_xoff_set)
    __swig_setmethods__["c_yoff"] = _c_vibep.ViBePlus_c_yoff_set
    __swig_getmethods__["c_yoff"] = _c_vibep.ViBePlus_c_yoff_get
    if _newclass:
        c_yoff = _swig_property(_c_vibep.ViBePlus_c_yoff_get, _c_vibep.ViBePlus_c_yoff_set)
ViBePlus_swigregister = _c_vibep.ViBePlus_swigregister
ViBePlus_swigregister(ViBePlus)

DEFAULT_NUM_SAMPLES = _c_vibep.DEFAULT_NUM_SAMPLES
DEFAULT_MIN_MATCHES = _c_vibep.DEFAULT_MIN_MATCHES
DEFAULT_RADIUS = _c_vibep.DEFAULT_RADIUS
DEFAULT_RANDOM_SAMPLE = _c_vibep.DEFAULT_RANDOM_SAMPLE
AMP_MULTIFACTOR = _c_vibep.AMP_MULTIFACTOR
ID_FORENUM = _c_vibep.ID_FORENUM
ID_BGINNER = _c_vibep.ID_BGINNER
ID_INNER_STATE = _c_vibep.ID_INNER_STATE
ID_BLINK_LEVEL = _c_vibep.ID_BLINK_LEVEL
ID_MAX_INNERGRAD = _c_vibep.ID_MAX_INNERGRAD
# This file is compatible with both classic and new-style classes.


